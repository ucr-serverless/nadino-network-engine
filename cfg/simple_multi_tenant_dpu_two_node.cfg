# Copyright 2025 University of California, Riverside
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name = "three tenants";

nfs = (
    {
        id = 1;
        name = "NF 1";
        tenant_id: 0;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        node = 0;
        mode = 1;
    },
    {
        id = 2;
        name = "NF 2";
        tenant_id: 1;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        node = 0;
        mode = 1;
    },
    {
        id = 3;
        name = "NF 3";
        tenant_id: 2;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        node = 0;
        mode = 1;
    },
    {
        id = 4;
        name = "NF 4";
        tenant_id: 0;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        node = 1;
        mode = 0;
    },
    {
        id = 5;
        name = "NF 5";
        tenant_id: 1;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        node = 1;
        mode = 0;
    },
    {
        id = 6;
        name = "NF 6";
        tenant_id: 2;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        node = 1;
        mode = 0;
    }
);

routes = (
    {
        id = 1;
        name = "Route 1";

        hops = [1, 4, 1];
    },
    {
        id = 2;
        name = "Route 2";

        hops = [2, 5, 2];
    },
    {
        id = 3;
        name = "Route 3";

        hops = [3, 6, 3];
    }
);


nodes = (
    {
        id = 0;
        hostname = "everest-1";
        dpu_hostname = "dpu-1";

        ip_address = "192.168.10.61";
        dpu_ip_addr = "192.168.10.42"
        port = 8084;

        rdma_device = "mlx5_2";
        comch_server_device = "0000:03:00.0";
        comch_client_device = "0000:d8:00.0";
        comch_client_rep_device = "0000:d8:00.0";
        // RDMA device index
        sgid_idx = 1;
        mode = 3;
        // 0 for not connect ingress, 1 for connect to ingress
        receive_req = 0;
        mm_ip = "192.168.10.61";
        mm_port = 8087;
    },
    {
        id = 1;
        hostname = "flashstack-9";
        dpu_hostname = "dpu-3";

        ip_address = "192.168.10.65";
        dpu_ip_addr = "192.168.10.48";
        port = 8084;

        rdma_device = "mlx5_2";
        comch_server_device = "0000:03:00.0";
        comch_client_device = "0000:04:00.0";
        comch_client_rep_device = "0000:04:00.0";

        // RDMA device index
        sgid_idx = 1;
        mode = 4;
        // 0 for not connect ingress, 1 for connect to ingress
        receive_req = 0;
        mm_ip = "192.168.10.65";
        mm_port = 8086;
    }
);

tenants = (
    {
        id = 0;
        weight = 5;
        routes = [1];
    },
    {
        id = 1;
        weight = 1;
        routes = [2];
    },
    {
        id = 2;
        weight = 3;
        routes = [3];
    }
);

memory_manager = {
    local_mempool_size = 10000;
    port = 8086;
    ip = "192.168.10.61";
    device = "mlx5_0";
    // 1 for mm and gateway on different host, 0 for same
    is_remote_memory = 0;
};

rdma_settings = {
    // 1: use rdma 0: use tcp socket
    use_rdma = 1;
    // 1: use one-side 0: ues_two-side
    use_one_side = 0;
    // DOCA_rdma maximum is around 8000
    n_init_task = 8000;
    n_init_recv_req = 1000;

    // control the settings in multi tenacy expt
    tenant_expt = 1;
    msg_sz = 1024;
    n_msg = 10000000;
    json_path = 'cfg/multi-tenancy-expt.json';

};
