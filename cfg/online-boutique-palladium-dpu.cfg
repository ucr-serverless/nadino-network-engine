# Copyright 2025 University of California, Riverside
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name = "three tenants";

nfs = (
    {
        id = 1;
        name = "frontendservice";
        tenant_id: 0;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        node = 0;
        // passive receiving
        mode = 0;
    },
    {
        id = 2;
        name = "currencyservice";
        tenant_id: 0;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        // passive receiving
        mode = 0;
        node = 1;
    },
    {
        id = 3;
        name = "productcatalogservice";
        tenant_id: 0;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        // passive receiving
        mode = 0;
        node = 1;
    },
    {
        id = 4;
        name = "cartservice";
        tenant_id: 0;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        // passive receiving
        mode = 0;
        node = 1;
    },
    {
        id = 5;
        name = "recommendationservice";
        tenant_id: 0;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        // passive receiving
        mode = 0;
        node = 0;
    },
    {
        id = 6;
        name = "shippingservice";
        tenant_id: 0;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        // passive receiving
        mode = 0;
        node = 1;
    },
    {
        id = 7;
        name = "checkoutservice";
        tenant_id: 0;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        // passive receiving
        mode = 0;
        node = 0;
    },
    {
        id = 8;
        name = "paymentservice";
        tenant_id: 0;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        // passive receiving
        mode = 0;
        node = 1;
    },
    {
        id = 9;
        name = "emailservice";
        tenant_id: 0;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        // passive receiving
        mode = 0;
        node = 1;
    },
    {
        id = 10;
        name = "adservice";
        tenant_id: 0;

        n_threads = 32;

        params = {
            memory_mb = 0;
            sleep_ns = 0;
            compute = 0;
        };

        // passive receiving
        mode = 0;
        node = 1;
    }

);

routes = (
    {
        id = 1;
        name = "GET /";

        hops = [1, 2, 1, 3, 1, 4, 1, 2, 1, 10, 1];
    },
    {
        id = 2;
        name = "POST /setCurrency";

        hops = [1];
    },
    {
        id = 3;
        name = "GET /product/$ID";

        hops = [1, 3, 1, 2, 1, 4, 1, 2, 1, 5, 1, 4, 1, 10, 1];
    },
    {
        id = 4;
        name = "GET /cart";

        hops = [1, 2, 1, 4, 1, 5, 1, 6, 1, 2, 1, 3, 1, 2, 1];
    },
    {
        id = 5;
        name = "POST /cart";

        hops = [1, 3, 1, 4, 1];
    },
    {
        id = 6;
        name = "POST /cart/checkout";

        hops = [1, 7, 4, 7, 3, 7, 2, 7, 6, 7, 2, 7, 8, 7, 6, 7, 4, 7, 9, 7, 1, 5, 1, 2, 1];
    }

);


nodes = (
    {
        id = 0;
        hostname = "node2.nadino.kkprojects-pg0.clemson.cloudlab.us";
        dpu_hostname = "localhost.localdomain";

        ip_address = "10.10.1.10";
        dpu_ip_addr = "10.10.1.3"
        port = 8084;

        rdma_device = "mlx5_2";
        comch_server_device = "0000:03:00.0";
        comch_client_device = "0000:81:00.0";
        comch_client_rep_device = "0000:81:00.0";
        // RDMA device index
        sgid_idx = 3;
        mode = 4;
        // 0 for not connect ingress, 1 for connect to ingress
        receive_req = 1;
        mm_ip = "10.10.1.10";
        mm_port = 8087;
    },
    {
        id = 1;
        hostname = "node3.nadino.kkprojects-pg0.clemson.cloudlab.us";
        dpu_hostname = "localhost.localdomain";

        ip_address = "10.10.1.11";
        dpu_ip_addr = "10.10.1.4";
        port = 8084;

        rdma_device = "mlx5_2";
        comch_server_device = "0000:03:00.0";
        comch_client_device = "0000:81:00.0";
        comch_client_rep_device = "0000:81:00.0";

        // RDMA device index
        sgid_idx = 3;
        mode = 4;
        // 0 for not connect ingress, 1 for connect to ingress
        receive_req = 0;
        mm_ip = "10.10.1.11";
        mm_port = 8086;
    }
);

tenants = (
    {
        id = 0;
        weight = 5;
        routes = [1, 2, 3, 4, 5, 6];
    }
);

memory_manager = {
    local_mempool_size = 8000;
    port = 8086;
    ip = "10.10.1.11";
    device = "mlx5_2";
    // 1 for mm and gateway on different host, 0 for same
    is_remote_memory = 0;
};

rdma_settings = {
    // 1: use rdma 0: use tcp socket
    use_rdma = 1;
    // 1: use one-side 0: ues_two-side
    use_one_side = 0;
    // DOCA_rdma maximum is around 8000
    n_init_task = 8000;
    n_init_recv_req = 8000;

    // control the settings in multi tenacy expt
    tenant_expt = 0;
    msg_sz = 1024;
    n_msg = 2000000;
    ngx_ip = "10.10.1.5";
    // default ngx id
    // only support one ngx worker now
    ngx_id = 0;
    json_path = "cfg/multi-tenancy-expt.json";
    is_dummy_nf = 0;

};
